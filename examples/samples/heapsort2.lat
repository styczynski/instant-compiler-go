// Author: Robert Rosolek 277585
//
// input is in format :
// n    <-- number of elements to sort
// a_1
// ...       <-- elements to sort
// a_n
//
// code based on wazniak.mimuw.edu.pl

// assuming that a[p + 1] ... a[r] is a heap,
// this function makes a[p] ... a[r] a heap 
void maxHeapify(int[] a, int p, int r) {
	int s = p, v = a[s];
	while (2 * s <= r) {
		int t = 2 * s;
		if (t < r)
			if (a[t + 1] > a[t])
				t++;
		if (v >= a[t]) {
			a[s] = v;
			s = r + 1; // force to leave the loop
		}
		else {
			a[s] = a[t];
			s = t;
		}
	}
	if (s <= r)
		a[s] = v;
} 

int main() {

	// number of elements to sort
	int n;
	
	// array of elements to sort
	int[] a; 
    
    // read data from input
    n = readInt();
    a = new int[n];
    int i = 0;
	while (i < a.length) {
		a[i] = readInt();
		i++;
	}
    	
    // build heap
    i = (n - 1) / 2;
    while (i >= 0) {
    	maxHeapify(a, i, n - 1);
    	i--;
    }
 
 	// sort   	
    i = n - 1;
    while (i >= 1) {
    	// swap a[i] and a[0]
    	int tmp = a[i];
    	a[i] = a[0];
    	a[0] = tmp;
    	
    	maxHeapify(a, 0, i - 1);
    	
    	i--;
    }

	// assert that array is sorted    
	i = 0;
	while (i < n - 1) {
		if (a[i] > a[i + 1])
			error();
		i++;
	}
	
	// output sorted array
	for (int it : a)
		printInt(it);
		
	return 0;
}
